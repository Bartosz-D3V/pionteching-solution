plugins {
    id("java")
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.4"
    id("io.gatling.gradle") version "3.9.2.2"
    id("com.diffplug.spotless") version "6.17.0"
    id("me.champeau.jmh") version "0.7.0"
    id("jacoco")
}

version = "0.1"
group = "pl.ing"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.reactivex.rxjava3:rxjava:3.1.6")
    runtimeOnly("ch.qos.logback:logback-classic")

    // Java JMH
    implementation("org.openjdk.jmh:jmh-core:1.36")
    annotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:1.36")

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.2")
}

application {
    mainClass.set("pl.ing.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("pl.ing.*")
    }
}

spotless {
    format "misc", {
        target "*.gradle", "*.md", ".gitignore", "*.json", "*.yml", "*.xml", "*.sh"

        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
        setEncoding("utf-8")
    }

    java {
        endWithNewline()
        palantirJavaFormat()
        targetExclude("**/TestScenarioDataProvider.java")
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "pl/ing/**/Application.class"
            ])
        }))
    }
}

test {
    finalizedBy jacocoTestReport
}
